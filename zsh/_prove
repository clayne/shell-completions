#compdef prove

# Generated with perl module App::Spec v0.013

_prove() {
    local program=prove
    typeset -A opt_args
    local curcontext="$curcontext" state line context


        # ---- Command: 
        _arguments -s  \
            '*: :->tests' \
            '--verbose[Print all test lines]' \
            '-v[Print all test lines]' \
            '--lib[Add '"'"'lib'"'"' to the path for your tests]' \
            '-l[Add '"'"'lib'"'"' to the path for your tests]' \
            '--blib[Add '"'"'blib/lib'"'"' and '"'"'blib/arch'"'"' to the path]' \
            '-b[Add '"'"'blib/lib'"'"' and '"'"'blib/arch'"'"' to the path]' \
            '--shuffle[Run the tests in random order]' \
            '-s[Run the tests in random order]' \
            '--color[Colored test output (default)]' \
            '-c[Colored test output (default)]' \
            '--nocolor[Do not color test output]' \
            '--count[Show the X/Y test count when not verbose]' \
            '--nocount[Disable the X/Y test count]' \
            '--dry[Dry run]' \
            '-D[Dry run]' \
            '--failures[Show failed tests]' \
            '-f[Show failed tests]' \
            '--comments[Show comments]' \
            '-o[Show comments]' \
            '--ignore-exit[Ignore exit status from test scripts]' \
            '--merge[Merge test scripts STDERR with their STDOUT]' \
            '-m[Merge test scripts STDERR with their STDOUT]' \
            '--recurse[Recursively descend into directories]' \
            '-r[Recursively descend into directories]' \
            '--reverse[Run the tests in reverse order]' \
            '--quiet[Suppress some test output]' \
            '-q[Suppress some test output]' \
            '--QUIET[Only print summary results]' \
            '-Q[Only print summary results]' \
            '--parse[Show full list of TAP parse errors]' \
            '-p[Show full list of TAP parse errors]' \
            '--directives[Only show results with TODO or SKIP directives]' \
            '--timer[Print elapsed time after each test]' \
            '--trap[Trap Ctrl-C and print summary on interrupt]' \
            '--normalize[Normalize TAP output in verbose output]' \
            '-T[Enable tainting checks]' \
            '-t[Enable tainting warnings]' \
            '-W[Enable fatal warnings]' \
            '-w[Enable warnings]' \
            '--version[Display the version]' \
            '-V[Display the version]' \
            '--man[Longer manpage]' \
            '-H[Longer manpage]' \
            '--norc[Dont process default .proverc]' \
            '-I[Library paths to include]:I:_path_files -/' \
            '--exec[Interpreter to run the tests]:exec' \
            '-e[Interpreter to run the tests]:exec' \
            '--ext[Set the extension for tests]:ext' \
            '--harness[Define test harness to use]:harness' \
            '--formatter[Result formatter to use]:formatter' \
            '--source[Load and/or configure a SourceHandler]:source' \
            '--archive[Store the resulting TAP in an archive file]:archive:_files' \
            '-a[Store the resulting TAP in an archive file]:archive:_files' \
            '--rc[Process options from rcfile]:rc:_files' \
            '--rules[Rules for parallel vs sequential processing]:rules' \
            '-j[Run N test jobs in parallel]:j:("1" "2" "3" "4" "5" "6" "7" "8" "9")' \
            '*--state[Control proves persistent state]:state:("last" "failed" "passed" "all" "hot" "todo" "slow" "fast" "new" "old" "fresh" "save")' \
            '*-s[Control proves persistent state]:state:("last" "failed" "passed" "all" "hot" "todo" "slow" "fast" "new" "old" "fresh" "save")' \
            '*-P[Load plugin]:P:_prove__option_P_completion' \
            '*-M[Load a module]:M:_prove__option_M_completion' \
            '--help[Show command help]' \
            '-h[Show command help]' \
            && ret=0

        case $state in
        tests)
_files
        ;;
        esac


}

_prove__option_P_completion() {
    local __dynamic_completion
    local CURRENT_WORD="$words[CURRENT]"
    IFS=$'\n' __dynamic_completion=( $( find `perl -wE'say for @INC'` | grep '/App/Prove/Plugin/.*.pm$' | perl -plE's{^.*/(App/Prove/Plugin/.*)\.pm$}{$1}; s{/}{::}g' ) )
    compadd -X "P:" $__dynamic_completion
}
_prove__option_M_completion() {
    local __dynamic_completion
    local CURRENT_WORD="$words[CURRENT]"
    IFS=$'\n' __dynamic_completion=( $( \
for incpath in $(perl -wE'say for @INC'); do \
  find $incpath -name "*.pm" -printf "%P\n" \
  | perl -plE's{/}{::}g; s{\.pm}{}' \
  | grep "^$CURRENT_WORD"; \
done ) )
    compadd -X "M:" $__dynamic_completion
}

__prove_dynamic_comp() {
    local argname="$1"
    local arg="$2"
    local comp="arg:$argname:(("
    local line
    while read -r line; do
        local name="$line"
        local desc="$line"
        name="${name%$'\t'*}"
        desc="${desc/*$'\t'}"
        comp="$comp$name"
        if [[ -n "$desc" && "$name" != "$desc" ]]; then
            comp="$comp\\:"'"'"$desc"'"'
        fi
        comp="$comp "
    done <<< "$arg"

    comp="$comp))"
    _alternative "$comp"
}

