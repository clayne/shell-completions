#compdef ysh

_ysh() {
    local program=ysh
    typeset -A opt_args
    local curcontext="$curcontext" state line context


        # ---- Command: 
        _arguments -s  \
            '1: :->file' \
            '-M[Set the YAML implementation module you wish]' \
            '-l[Keep a log of all ysh activity in '"'"'./ysh.log'"'"'. Append mode]' \
            '-L[Keep a log of all ysh activity in '"'"'./ysh.log'"'"'. Delete first]' \
            '-r[Test roundtripping]' \
            '-R[Same as -r, except that a confirmation message will be printed when the roundtrip succeeds]' \
            '-i[Specify the number of characters to indent each level]:i:("1" "2" "3" "4" "5" "6" "7" "8")' \
            '-v[Print the versions of ysh and the YAML implementation module in use]' \
            '-V[Like -v, and print the versions of YAML related modules]' \
            '--help[Show command help]' \
            '-h[Show command help]' \
            && ret=0

        case $state in
        file)
_files
        ;;
        esac


}


__ysh_dynamic_comp() {
    local argname="$1"
    local arg="$2"
    local comp="arg:$argname:(("
    local line
    while read -r line; do
        local name="$line"
        local desc="$line"
        name="${name%$'\t'*}"
        desc="${desc/*$'\t'}"
        comp="$comp$name"
        if [[ -n "$desc" && "$name" != "$desc" ]]; then
            comp="$comp\\:"'"'"$desc"'"'
        fi
        comp="$comp "
    done <<< "$arg"

    comp="$comp))"
    _alternative "$comp"
}

