#compdef h2xs

# Generated with perl module App::Spec v0.012

_h2xs() {
    local program=h2xs
    typeset -A opt_args
    local curcontext="$curcontext" state line context


        # ---- Command: 
        _arguments -s  \
            '*: :->Files' \
            '--omit-autoload[Omit all autoload facilities]' \
            '-A[Omit all autoload facilities]' \
            '--beta-version[Use an alpha/beta style version number]' \
            '-B[Use an alpha/beta style version number]' \
            '--omit-changes[Omits creation of the Changes file]' \
            '-C[Omits creation of the Changes file]' \
            '--cpp-flags[Additional flags to specify to C preprocessor]:cpp-flags' \
            '-F[Additional flags to specify to C preprocessor]:cpp-flags' \
            '--func-mask[selects functions/macros to process]:func-mask' \
            '-M[selects functions/macros to process]:func-mask' \
            '--overwrite-ok[Allows a pre-existing extension directory to be overwritten]' \
            '-O[Allows a pre-existing extension directory to be overwritten]' \
            '--omit-pod[Omit the autogenerated stub POD section]' \
            '-P[Omit the autogenerated stub POD section]' \
            '--omit-XS[Omit the XS portion]' \
            '-X[Omit the XS portion]' \
            '--gen-accessors[Generate an accessor method for each element of structs and unions]' \
            '-a[Generate an accessor method for each element of structs and unions]' \
            '--compat-version[Generates a .pm file which is backwards compatible...]:compat-version' \
            '-b[Generates a .pm file which is backwards compatible...]:compat-version' \
            '--omit-constant[Omit "constant()" from the .xs file]' \
            '-c[Omit "constant()" from the .xs file]' \
            '--debugging[Turn on debugging messages]' \
            '-d[Turn on debugging messages]' \
            '--omit-enums[skip all constants (matching the regex) that are defined in a C enumeration]:omit-enums' \
            '-e[skip all constants (matching the regex) that are defined in a C enumeration]:omit-enums' \
            '--force[Allows an extension to be created for a header not found]' \
            '-f[Allows an extension to be created for a header not found]' \
            '--global[Include code for safely storing static data in the .xs file]' \
            '-g[Include code for safely storing static data in the .xs file]' \
            '--omit-const-func[omit the const attribute in the generated XS code]' \
            '-k[omit the const attribute in the generated XS code]' \
            '--gen-tied-var[for each variable declare a perl variable of the same...]' \
            '-m[for each variable declare a perl variable of the same...]' \
            '--name[Specifies a name to be used for the extension]:name' \
            '-n[Specifies a name to be used for the extension]:name' \
            '--opaque-re[Use "opaque" data type for the C types matched...]:opaque-re' \
            '-o[Use "opaque" data type for the C types matched...]:opaque-re' \
            '--remove-prefix[Specify a prefix which should be removed from the Perl function names]:remove-prefix' \
            '-p[Specify a prefix which should be removed from the Perl function names]:remove-prefix' \
            '--const-subs[Create a perl subroutine for the specified macros...]:const-subs' \
            '-s[Create a perl subroutine for the specified macros...]:const-subs' \
            '--default-type[Specify the internal type that the constant() mechanism uses for macros]:default-type' \
            '-t[Specify the internal type that the constant() mechanism uses for macros]:default-type' \
            '--use-new-tests[use "Test::More" rather than "Test"]' \
            '--use-old-tests[Will force the generation of test code that uses the older "Test" module]' \
            '--skip-exporter[Do not use "Exporter" and/or export any symbol]' \
            '--skip-ppport[Do not use "Devel::PPPort"]' \
            '--skip-autoloader[Do not use the module "AutoLoader"]' \
            '--skip-strict[Do not use the pragma "strict"]' \
            '--skip-warnings[Do not use the pragma "warnings"]' \
            '--version[Specify a version number for this extension]:version' \
            '-v[Specify a version number for this extension]:version' \
            '--autogen-xsubs[Automatically generate XSUBs basing on function declarations in the header file]' \
            '-x[Automatically generate XSUBs basing on function declarations in the header file]' \
            '--help[Show command help]' \
            '-h[Show command help]' \
            && ret=0

        case $state in
        Files)
_files
        ;;
        esac


}


__h2xs_dynamic_comp() {
    local argname="$1"
    local arg="$2"
    local comp="arg:$argname:(("
    local line
    while read -r line; do
        local name="$line"
        local desc="$line"
        name="${name%$'\t'*}"
        desc="${desc/*$'\t'}"
        comp="$comp$name"
        if [[ -n "$desc" && "$name" != "$desc" ]]; then
            comp="$comp\\:"'"'"$desc"'"'
        fi
        comp="$comp "
    done <<< "$arg"

    comp="$comp))"
    _alternative "$comp"
}

