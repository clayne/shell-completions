#compdef fallocate

# Generated with perl module App::Spec v0.013

_fallocate() {
    local program=fallocate
    typeset -A opt_args
    local curcontext="$curcontext" state line context


        # ---- Command: 
        _arguments -s  \
            '1: :->file' \
            '--collapse-range[Removes a byte range from a file, without leaving a hole]' \
            '-c[Removes a byte range from a file, without leaving a hole]' \
            '--dig-holes[Detect and dig holes]' \
            '-d[Detect and dig holes]' \
            '--insert-range[nsert a hole of length bytes from offset, shifting existing data]' \
            '-i[nsert a hole of length bytes from offset, shifting existing data]' \
            '--length[Specifies the length of the range, in bytes]:length' \
            '-l[Specifies the length of the range, in bytes]:length' \
            '--keep-size[Do not modify the apparent length of the file]' \
            '-n[Do not modify the apparent length of the file]' \
            '--offset[Specifies the beginning offset of the range, in bytes]:offset' \
            '-o[Specifies the beginning offset of the range, in bytes]:offset' \
            '--punch-hole[Deallocates space (i.e., creates a hole) in the byte range...]' \
            '-p[Deallocates space (i.e., creates a hole) in the byte range...]' \
            '--verbose[Enable verbose mode]' \
            '-v[Enable verbose mode]' \
            '--posix[Enable POSIX operation mode]' \
            '-x[Enable POSIX operation mode]' \
            '--zero-range[Zeroes space in the byte range starting at offset and continuing...]' \
            '-z[Zeroes space in the byte range starting at offset and continuing...]' \
            '--version[Display version information]' \
            '-V[Display version information]' \
            '--help[Show command help]' \
            '-h[Show command help]' \
            && ret=0

        case $state in
        file)
_files
        ;;
        esac


}


__fallocate_dynamic_comp() {
    local argname="$1"
    local arg="$2"
    local comp="arg:$argname:(("
    local line
    while read -r line; do
        local name="$line"
        local desc="$line"
        name="${name%$'\t'*}"
        desc="${desc/*$'\t'}"
        comp="$comp$name"
        if [[ -n "$desc" && "$name" != "$desc" ]]; then
            comp="$comp\\:"'"'"$desc"'"'
        fi
        comp="$comp "
    done <<< "$arg"

    comp="$comp))"
    _alternative "$comp"
}

